package tile;import main.GamePanel;import main.ToolBox;import javax.imageio.ImageIO;import java.awt.*;import java.io.*;import java.util.ArrayList;public class TileManager {    GamePanel gp;    public Tile[] tile;    public int[][][] mapTileNum;    public int[][] spawnPoints = {            {24, 24},            {26,28},            {38,25},            {24,36},            {10,44},            {7,44}    };    ArrayList<String> fileNames = new ArrayList<>();    ArrayList<String> collisionStatus = new ArrayList<>();    public TileManager(GamePanel gp) {        this.gp = gp;        try (InputStream is = getClass().getResourceAsStream("/maps/data001.txt");             BufferedReader br = new BufferedReader(new InputStreamReader(is))) {            String line;            while ((line = br.readLine()) != null) {                fileNames.add(line);                collisionStatus.add(br.readLine());            }        } catch (Exception e) {            e.printStackTrace();        }        tile = new Tile[fileNames.size()];        getTileImage();        loadMap("/maps/mapaquarto.csv", 0);        loadMap("/maps/mapaloja.csv", 1);        loadMap("/maps/mapainicio.csv", 2);        loadMap("/maps/matanebulosa.csv", 3);        loadMap("/maps/mapamagmeria.csv", 4);        loadMap("/maps/mapadesertosombrio.csv", 5);    }    public void getTileImage() {        for (int i = 0; i < fileNames.size(); i++) {            String fileName = fileNames.get(i);            boolean collision = collisionStatus.get(i).equalsIgnoreCase("true");            setup(i, fileName, collision);        }    }    public void setup(int index, String imageName, boolean collision) {        ToolBox tBox = new ToolBox();        try {            tile[index] = new Tile();            tile[index].image = ImageIO.read(getClass().getResourceAsStream("/tiles/" + imageName));            tile[index].image = tBox.scaleImage(tile[index].image, gp.tileSize, gp.tileSize);            tile[index].collision = collision;        } catch (Exception e) {            e.printStackTrace();        }    }    public void loadMap(String caminho, int map) {        try (InputStream is = getClass().getResourceAsStream(caminho);             BufferedReader br = new BufferedReader(new InputStreamReader(is))) {            ArrayList<String> lines = new ArrayList<>();            String line;            while ((line = br.readLine()) != null) {                lines.add(line);            }            int rows = lines.size();            int cols = lines.get(0).split(",").length;            gp.maxWorldCol = cols;  // Definindo o número de colunas            gp.maxWorldRow = rows;  // Definindo o número de linhas            if (mapTileNum == null) {                mapTileNum = new int[gp.maxMap][gp.maxWorldCol][gp.maxWorldRow];            }            for (int row = 0; row < rows; row++) {                String[] numbers = lines.get(row).split(",");                for (int col = 0; col < cols; col++) {                    int num = Integer.parseInt(numbers[col].trim());                    mapTileNum[map][col][row] = num;                }            }        } catch (Exception e) {            e.printStackTrace();        }    }    public void draw(Graphics2D g2) {        int worldCol = 0;        int worldRow = 0;        while (worldRow < gp.maxWorldRow) {            while (worldCol < gp.maxWorldCol) {                int tileNum = mapTileNum[gp.currentMap][worldCol][worldRow];                int worldX = worldCol * gp.tileSize;                int worldY = worldRow * gp.tileSize;                int screenX = worldX - gp.player.worldX + gp.player.screenX;                int screenY = worldY - gp.player.worldY + gp.player.screenY;                if (screenX + gp.tileSize > 0 && screenX < gp.screenWidth &&                        screenY + gp.tileSize > 0 && screenY < gp.screenHeight) {                    g2.drawImage(tile[tileNum].image, screenX, screenY, gp.tileSize, gp.tileSize, null);                }                worldCol++;            }            worldCol = 0;            worldRow++;        }    }}